2023/9/25

1    Check whether all punctuation marks are in English form.
(You can change the font to 'Consolas' by 
'IDLE->Options->Configure IDLE->Fonts/Tabs->Font Face->Consolas'.)  

2    Check whether indentation is right.

3    Check whether the spelling of functions and variables is correct.

4    Check all builtin functions by "dir(__builtins__)".

5    Variable name can not start with a number.

6    Chinese is allowed to be variable names.

7    Assign two varables to a same value by "x=y=0".

8    Exchange values of two variables by "x, y=y, x".

9    Use double quotes can automatically deal with single quotes in string, 
     which is also suitable for using single quotes handling double quotes.
     Or simple use "\" in front of quotes in string.
(Such as "print("I'm OK now. Let's go!")" 
or "print('"Life is short, you need python."')"
or "print("\"Let\'s go!\""))

10   Use raw string to ingore the function of "\".
(such as "print(r"C:\Desktop\Python")")

11   Only when "\" exists in the end can wrapping using "enter". 
     And using triple quotes can acheive this.
(such as "print("
           1             \n\
        1     1          \n\
     1     2     1       \n\
  1     3     3     1    \n\
)" or "print("""\
           1            
        1     1          
     1     2     1      
  1     3     3     1     
""")")

12   Use "+" to connect two string together 
     or use "*" to repeat a string many times.
(such as "'520'+'1314'" or ""I love you!\n"*100")

13   The computing answer of floating point numbers is not accurate, 
     unlike integers.
(can be solved by "x = decimal.Decimal('0.1')")

14   Use "e" to present extreme large/small number
(such as "6.36e-34")

15   Complex number is regarded as two float numbers
(such as "x = 1+5j" or "x.real" or "x.imag")

16   3 // 2 == 1
     -3 // 2 == -2

17   3 % 2 == 1
     -3 % 2 == 1
     -3 % -2 == -1

18   divmod(x,y) == (x//y,x%y)

19   abs(3+4j) == 5
     complex(3,4) == (3+4j)
     complex('3+4j') == 3+4j

20   int(9.99) == 9

21   pow(x,y) == x**y
     pow(x,y,z) == x**y%z

22   The answer is false when "None", "False", "value is 0" ,"empty". 
(such as "bool(" ") == True" or "bool("") == False")

23   "and" and "or" obey short rule, which means from left to right, 
     only when the first variable cannot get the result, 
     the second variable will be calculated.
(such as "3 and 4 == 4" or "0 and -1 == 0" or "3 or 4" == 3)

24   Operator priority: "lambda" < "if" < "or" < "and" < "not" 
     < "==" < "|" < "^" < "&" < "<<" < "+" < "*,/,//,%,@" < "+x,-x" 
     < "**" < "await" < "x[index]" < "(expressions...)"

25   Draw flow charts or mind maps before programming.

26   "print(1) if x == 0 else print(0)" ==
     "if x == 0:
          print(1)
      else:
          print(0)"

27   Expressions in "else" (pairing with "while" or "for") will not be executed 
     if "break" is executed.


2023/9/26

1    x[0] == x[-len(x)]
     x[-1] == x[len(x) - 1 ]

2    x[a:b] == [a,b) in x
     x[start = 0 : end = len(x) : step = 1]
     x[::-1] == x.reverse()

3    x.append(single object) == x[len(x):] = [single object]
     x.extend(iterable object) == x[len(x):] = iterable object
     x.insert(position,element)

4    x.remove(element) (only remove the first one, and error if not found)
     x.pop(posiiton)
     x.clear()
     
5    x.sort(key = None, reverse = False) 
     x.reverse() 
     
6    x.count(element)
     x.index(element, start, end) (only return the first one)

7    x.copy() == x[:]

8    x + y == x.extend(y)
     x * 3 == x.extend(x + x)
     [x, y] == x, y
     x, y, *z = [1, 2, 3, 4, 5] == x = 1, y = 2, z = [3, 4, 5]

9    for i in range(3): A[i] = [0] * 3 != B = [[0] * 3] * 3
(A[0] is A[1] == False and B[0] is B[1] == True)

10   "=" transfer the reference, not the value.
(y = x[:]) != y = x)

11   "copy()" or "[:]" are only the shallow copy, which cannot handle nested list,
     which deep copy can handle.
(such as "y = copy.deepcopy(x)")

12   List comprehension expression: [expression for target in iterable if condition],
     which is also regarded as deep copy.
(such as "[float(i) * 5 for i in range(10)] if i % 3 != 0" or
"[col for row in matrix if row != [] for col in row if col != 0 ]" or
"[x + y for x in X for y in Y]")

13   List in tuple can be revised.

14   String is unchangable, so all builtin functions will return a new string.

15   x.capitalize() == "i LOVE you" -> "I love You"
     x.casefold() == "I LOVE you" -> "i love you"
     x.title() == "i LOVE you" -> "I Love You"
     x.swapcase() == "I LOVE you" -> "i love YOU"
     x.upper() == "i LOVE you" -> "I LOVE YOU"
     x.lower() == "i LOVE you" -> "i love you" (can only handle English)

16   "a".center(3, 0) == " 0a0"
     "a".ljust(3, "b") == "abb"
     "a".rjust(3, "c") == "cca"
     "-5".zfill(5)" == "-0005"

17   x.count() 
     x.find() (return -1 if not found)
     x.rfind() (find the last one)
     x.index()
     x.rindex()
  
18   Never use tab and space at the same code.
 
19   x.expandtabs(length) (replace all tabs with certain length)
     x.replace(old, new, count = -1)
     x.translate(table) (table is made by str.maketrans(old, new, erase))

20   x.startswith(target, start, end) (target can be a iterable object)
     x.endswith(target, start, end)
     x.istitle()
     x.isupper() ("x.upper().isupper" is always True)
     x.islower()
     x.isalpha() (space is not aplpha)
     x.isspace() ("\n" or others are also regarded as space)
     x.isprintable() ("\n" or others are not printable)
     x.isdecimal() 
     x.isdigit()
     x.isnumeric()
     x.isalnum()
     x.isidentifier()
     keyword.iskeyword(x)

21   x.lstrip(chars = None) (match every single character to remove)
     x.rstrip()
     x.strip()
     x.removeprefix(chars) (match the string to remove)
     x.removesuffix(chars)
     
22   x.partiotion(char) (split it into three parts: left, char, right, 
     find char from left to right)
     x.rpartition(char)
     x.split(sep = None, maxsplit = -1)
     x.rsplit(sep = None, maxsplit = -1)
     
23   "line break" is different in different OS, so use "x.splitlines()".

24   x.join(iterable object) (use x to connect all, really fast)
     
25   Use of string format:
(such as ""1 + 2 = {}".format(1 + 2)"
""1 + 2 = {1}, 1 * 2 = {0}".format(1 * 2, 1 + 2)"
""1 + 2 = {0}, 1 * 2 = {ans}".format(1 + 2, ans = 1 * 2)")
     format: [[fill]align][sign][#][0][width][grouping_option][.precision][type]
     "align":"<, >, =, ^"
     "width": the total length 
     "0": use "0" to fullfill the space (the object must be number)
     "fill":  fullfill the space (whose priority is higher than "0")
     "sign": "+, -" or " "
     "grouping_option": "," or "_"
     ".precision": for "f": how many digits after "."
                   for "g": how many digits in total
                   for none-number: maximun length of object
     "#": show the kind of decimal system
     "type": "b": 
             "c": unicode
             "d":
             "o":
             "x" or "X":
             "n" == "d" with separator 
             None == "d"   
             "e" or "E":
             "f" or "F":
             "g" or "G": small number == "f", big number == "e"
             "n" == "f" with separator
             "%" == 'f' with "%"
             None == "f"
     (these can be replaced by a "{corresponding name}" and value it in "format()")
(such as ""{0:.{prec}f}".format(3.1415, prec = 2)")

26   Use of f-string: (only in version later than Python 3.6)
     f"{1+2}" == "{}".format(1+2)
     f"{-520:010}" == "{:010}".format(-520)


2023/9/27

1    List, tuple and string are sequence, which can use "index", "slice",
     and "+, *".

2    Every variable has three parameters, "id" (never change since created),      
     "type" and "value".

3    "is" is the true for same number or tuple, in that they are  
     unchangable, and is false when facing same list.

4    "in" is to find whether a element is in a sequence.

5    "del"  can either delete a sequence or a element in a sequence.
(such as "del x[1:3] == x[1:3] = []"
or "del x[::2] != x[::2] == []"
or "del x[:] == x.clear()")

6    min(iterable, default="ValueError")
     max()
     len() (the max length is 2 ** 64 - 1)
     sum()
     sorted(iterable, key = None, reverse = False) (return a list)
(such as "sorted(x, key = len)")
     reversed() (return a reverse iterator)
     
7    all() (judge whether every element is true)
     any() (judge whether any element is true)
     list(enumerate(,start-index = 0)) 
     (return a list with each element like "(index, value)")
     zip() 
(such as "list(zip([1,2,3],[4,5])) == [(1,4),(2,5)]"
or "itertools.zip_longest([1,2,3],[4,5]) == [(1,4),(2,5),(3,None)]")
     map(function, iterable)
(such as "list(map(ord, "Iloveyou")) == [73,108,111,118,101,121,111,117]"
or "list(map(pow,[3,2],[3,4])) == [27,16]")
     filter(function, iterable) (return element haveing true result)
(such as "list(filter(str.islower,"AbcD") == ["b","c"]")

8    Iterable object can be used as many times as you want, but iterator     
     can only be used once.
(use "iter()" to create a iterator and 
use "next(iterator)" to visit all elements in iterator)

9    {"x":1,"y":2} == dict(x=1,y=2) == dict([("x",1),("y",2)]) == 
     dict(zip(["x","y"],[1,2]))
     dict.fromkeys("xyz",1) == {"x":1,"y":1,"z":1}

10   x.pop(key,default = KeyError)
     x.popitem() (delete a item randomly)
     del x[key]
     
11   x[key] = value == x.update(key=value)
(such as "x['a'] = 1 == x.update(a = 1)")
     x.get(key, default = KeyError)
     x.setdefault(key, default= value) (if not found, set default value)
     x.items() (will change with the change of "x")
     x.key() (will change with the change of "x")
     x.value() (will change with the change of "x")
     x.copy()

12   Use of dictionary comprehension expression:
     "y = {value:key for key,value in x.items() if value>100}"

13   "{}" -> "dict", "{1}" -> "set"

14   "set(x)" will change the amount of every value into 1.

15   x.isdisjoint() (check whether there is any same element)
     x.issubset() == x <= y
     x.issuperset() == x >= y
     x.union() == x | y
     x.difference() == x - y
     x.symmetric_difference() == x ^ y
     x.intersection() == x & y

16   x.update() 
     x.intersection_update()
     x.difference_update()
     x.symmetric_difference_update()
     x.add()
(such as "x.update("123") != x.add("123")")
     x.remove() (return KeyError if not found)
     x.discard()
     x.pop() (randomly delete)
     x.clear()

17   The element in dictionary or set must be hashable, 
     and in most situations, only unchangable element is hashable.
(such as "hash(1) == hash(1.0) != hash(1.001)")

18  Searching in set is way too faster than in list.


2023/10/8

1    Function will return "None" in the end.

2    Use keyword paramters to assign parameters by "name = value", 

3    Positional paramters must be in front of the keyword paramters.

4    Default parameters must be behind the undefault parameters.

5    "def fun(a,b,/,c)" means that parameters on the left of "/"
     must be positional parameters.

6    "def fun(a,b,*,c)" means that parameters on the right of "*"
     must be keyword parameters, 
     and the parameters behind the collective parameters
     must be assigned using keyword.

7    Use collective parameters to assign uncertain number of value,
     which is a tuple. 
(such as "def fun(*args)")

8    Return a tuple if a function returns multiple values.

9    "def fun(**a)" means "a" is a dictionary with collective and keyword feature.

10   Use unpack parameters to assign multiple parameters.
(such as "def fun(a) ##  x = (1,2,3) ## fun(*x)")  

11   Use "global" to define or revise a global parameters in a function,
     which is not recommended.

12   Use "nonlocal" to revise a parameters of a function in an inner function.

13   "LEGB" means "Local" > "Enclosed" > "Global" > "Built-In" parameters.

14   A function without parentheses can be a return value.

15   Use closures function to memorise some parameters.

16   A function can also be an input parameter of a fucntion.

17   Use decorator to achieve more functions without revising original codes.

18   The order of multiple decorators is from bottom to top.

19   "lambda arg1, arg2, ... : expression", which can be put in list, map.
(such as "lambda x: x * x",
"lambda ")

20   Use generator "yield" to remain the result of a function. 
     (the function stops at "yield", and execute next sentence in next call of this function)

21   Generator expression is similar to list expression, 
     the difference is that generator expression will output a result with a call, 
     and list expression will output all results in one call.

22   Recursion costs much more complex calculation.

23   Notes on functions can be written as:
     "def times(s:list[str] = "a", n:int = 1) -> dict[str, int]:"

24   Function's content:
     "func.__name__"
     "func.__annotation__"
     "func.__doc__"

25   The function using functions as paramters is called high order function.

26   "functools.reduce(func, iterable)" == "transfer all value into func one by one"
(such as "functools.reduce(lambda x,y:x*y, range(1,11))")
     "functools.partial(pow, exp=3)(2)" == "2 ** 3"
     

2023/10/9

1    Create or open file: "f = open(file, mode="w")" 
                          == "with open(file, "w") as f:"

2    Basic operations on file object:
     "f.write(text)" == single string
     "f.writelines(lines)" == multiple strings (without "\n")
     "f.close()" == save and confirm operations
     "f.flush" == save without closing the file object
     "f.readable()"
     "f.writable()"
     "f.tell()" == find the position of file pointer
     "f,seek(offset)" == change the position of the file pointer
     "f.read(size)" == size of characters
     "f.readline()" == read a line, including "\n"
     "f.truncate(pos)" == truncate the file at given position

3    Basic operations on file path:
     ("from pathlib import Path")
     "Path.cwd()"
     "p = Path(path)" == create a path object
     "q = p / "path"" == add path behind 
     "p.is_dir()"
     "p.is_file()"
     "p.exists()"
     "p.name" == last part of the path
     "p.stem" == get the name of the file
     "p.suffix" == get the suffix of the file
     "p.parent" == get the path of the parent directory
     "p.parents" == a iterable object collecting all parent directories from close to far
     "p.parts" == part the path into tuple
     "p.stat()"
     "p.resolve()" == change relative path into absolute path
     "p.iterdir()" == a generator collecting all file or path in current path
     "p.mkdir(exist_ok = False, parents = False)"
     "p.open()"
     "p.rename(name)"
     "p.rmdir()" == remove empty directory
     "p.unlink()" == remove file
     "p.glob("**/*.txt") = find all with ".txt"

3    Other operations on file:
     (with open(file, "wb") as f)
     "pickle.dump(x, f)"A
     (with open(file, "rb") as f)
     "pickle.load(x, f)"

4    handle exception:
"""
try:
    expression
except (ZeroDivisionError, ValueError) as e:
    expression
except TypeError:
    pass
else:
    expression
finally:
    expression
"""

5    "raise ValueError("Explanation")"
     "assert Expression" == AssertionError if False

6    Use "raise" nothing can skip left content in "try".

7    Must write "self" input in all functions in "class".
